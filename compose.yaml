name: cooknco

services:
  backend:
    container_name: cooknco-backend
    build:
      context: .
    volumes:
      - pictures:/img
      - logs:/var/log/cooknco
      - /secrets/cooknco/db.properties:/app/config/db.properties:ro
      - /secrets/cooknco/application.properties:/app/config/configuration.yaml:ro
    ports:
      - "8080:8080"
    networks:
      - cooknco-database-network
      - cooknco-frontend-network
      - cooknco-auth-network
    healthcheck:
      test: curl --fail http://localhost:8080/v1/health
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      database:
        condition: service_healthy

  frontend:
    container_name: cooknco-frontend
    build:
      context: frontend
    ports:
      - "80:80"
    networks:
      - cooknco-frontend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy

  database:
    container_name: cooknco-database
    image: postgres:17.2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeit
    ports:
      - "5432:5432"
    networks:
      - cooknco-database-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s

  redis:
    container_name: cooknco-redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cooknco-auth-network
    command: [ "redis-server", "--appendonly", "yes" ]

volumes:
  pictures: {}
  logs: {}
  postgres_data: {}
  redis_data: {}

networks:
  cooknco-frontend-network: {}
  cooknco-database-network: {}
  cooknco-auth-network: {}